name: Notebook Deployment - Databricks
on:
  workflow_call:
    inputs:
      databricks_code_path:
        description: Databricks Service Path
        type: string
        required: true
      
      service_code_file:
        description: code file path
        type: string
        required: true
    
    secrets:
      DATABRICKS_HOST:
        description:   'Databricks workspace URL'
        required: true
      DATABRICKS_TOKEN:
        description: 'Access token for Databricks CLI'
        required: true

jobs:
  push_to_db:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3.3.0
      
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Databricks CLI config
        run: |
            pip install databricks-cli 
            cat > ~/.databrickscfg << EOF
            [DEFAULT] 
            host = ${{ secrets.DATABRICKS_HOST }} 
            token = ${{ secrets.DATABRICKS_TOKEN }} 
            jobs-api-version = 2.1 
            EOF

      - name: Install required libraries
        run: sudo apt install -y jq

      - name: Check folder paths in databricks workspace
        run: |
            file=${{ inputs.databricks_code_path }}/${{ inputs.service_code_file }}        
            jq -c -r '.[]' $file | while read js_object; do 
              var_folder_path=$(jq -r '.folder_path' <<< "$js_object")

              echo "Item: $val_folder_path"

              var_output=$(databricks workspace ls $val_folder_path --absolute)

              if [[ "$output" == *"RESOURCE_DOES_NOT_EXIST"* ]]
              then
                echo "Folder $val_folder_path not found. Proceeding to create it..."
                databricks workspace mkdirs $val_folder_path
              else
                echo "Folder $val_folder_path already exists"
              fi              
            done

      - name: Deploy code to databricks workspace
        run: |
            file=${{ inputs.databricks_code_path }}/${{ inputs.service_code_file }}
            jq -c -r '.[]' $file | while read js_object; do 
              var_action=$(jq -r '.action' <<< "$js_object")
              var_file_type=$(jq -r '.file_type' <<< "$js_object")
              var_file_extension=$(jq -r '.file_extension' <<< "$js_object")
              var_file_name=$(jq -r '.file_name' <<< "$js_object")
              var_folder_path=$(jq -r '.folder_path' <<< "$js_object")

              echo "Item: $var_folder_path, $var_file_name, $var_file_type"

              databricks workspace import ./src/deploy/$var_file_type/$var_file_name$var_file_extension $var_folder_path/$var_file_name --language $var_file_type --overwrite
            done
            